#!/usr/bin/env bash
APT_PREREQUISITE_PACKAGES="
  apt-transport-https
  autotools-dev
  automake
  bison
  build-essential
  ca-certificates
  curl
  gettext
  git
  flex
  iputils-ping
  libbz2-dev
  libevent-dev
  libffi-dev
  liblzma-dev
  libncurses5-dev
  libncursesw5-dev
  libprotobuf-dev
  libreadline-dev
  libssl-dev
  libsqlite3-dev
  llvm
  net-tools
  netcat-openbsd
  pkg-config
  protobuf-compiler
  python-openssl
  rsync
  socat
  software-properties-common
  tk-dev
  wget
  xz-utils
  zlib1g-dev
  zsh
"

APT_PACKAGES="
  docker-ce
  editorconfig
  ruby
  ruby-dev
  silversearcher-ag
  tree
"

NODEJS_PACKAGES="
  eslint
  stylelint
  typescript
  tslint
  @vue/cli
"

PYTHON_PACKAGES="
  autopep8
  cookiecutter
  flake8
  isort
  pylint
  yapf
"

# prepare
mkdir -p $HOME/bin
mkdir -p $HOME/.config

# create swapfile
if [[ ! -d /swapfile ]] ; then
  sudo fallocate -l 2G /swapfile
  sudo chmod 600 /swapfile
  sudo mkswap /swapfile
  sudo swapon /swapfile
  sudo echo "/swapfile swap swap defaults 0 0" >> /etc/fstab
fi

# prerequisite system packages
echo "** Installing prerequisite system packages..."
TOINSTALL=
for package in ${APT_PREREQUISITE_PACKAGES} ; do
  if ! dpkg -s $package >/dev/null 2>&1; then
    TOINSTALL="${package} ${TOINSTALL} "
  fi
done
if [[ "" != "${TOINSTALL}" ]] ; then
  echo "   (packages to install: ${TOINSTALL})"
  sudo DEBIAN_FRONTEND=noninteractive apt install -yq ${TOINSTALL}
else
  echo "   (nothing to install)"
fi

# update system repositories
echo "** Updating system packages info..."

## docker
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"

## update
sudo apt update

# system packages
echo "** Installing system packages..."
TOINSTALL=
for package in ${APT_PACKAGES} ; do
  if ! dpkg -s $package >/dev/null 2>&1; then
    TOINSTALL="${package} ${TOINSTALL} "
  fi
done
if [[ "" != "${TOINSTALL}" ]] ; then
  echo "   (packages to install: ${TOINSTALL})"
  sudo DEBIAN_FRONTEND=noninteractive apt install -yq ${TOINSTALL}
else
  echo "   (nothing to install)"
fi

# update yadm's remote origin to use git instead of https
yadm remote set-url origin "git@github.com:akngs/dotfiles.git"

# add user to docker group
sudo usermod -aG docker ${USER}

# zsh
if [[ "/usr/bin/zsh" != "$SHELL" ]] ; then
  echo "** Changing shell to zsh"
  sudo chsh -s /usr/bin/zsh ${USER}
fi

# oh-my-zsh
if [[ ! -d ~/.oh-my-zsh ]] ; then
  echo "** Installing oh-my-zsh"
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  # revert .zshrc
  yadm checkout -- ~/.zshrc
fi

# mosh
if [[ ! -x /usr/local/bin/mosh ]] ; then
  echo "** Installing mosh"
  git clone https://github.com/mobile-shell/mosh
  cd mosh
  ./autogen.sh
  ./configure
  make
  sudo make install
  cd ..
  rm -rf mosh
fi

# neovim
if [[ ! -f ~/bin/nvim ]] ; then
  echo "** Installing neovim"
  curl -LO https://github.com/neovim/neovim/releases/download/stable/nvim.appimage
  chmod u+x nvim.appimage
  mv nvim.appimage $HOME/bin/nvim
  ln -sf $HOME/bin/nvim $HOME/bin/vim
fi

# vim-plug
if [[ ! -f ~/.local/share/nvim/site/autoload/plug.vim ]] ; then
  echo "** Installing vim-plug"
  curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  nvim '+PlugUpdate' '+PlugClean!' '+PlugUpdate' '+qall'
fi

# tmux
if [[ ! -x /usr/local/bin/tmux ]] ; then
  echo "** Installing tmux"
  git clone https://github.com/tmux/tmux.git
  cd tmux
  sh autogen.sh
  ./configure
  make
  sudo make install
  cd ..
  rm -rf tmux
fi

# jekyll
if [[ ! -x /usr/local/bin/jekyll ]] ; then
  echo "** Installing jekyll"
  sudo gem install bundle jekyll
fi

# fzf
if [[ ! -d ~/.fzf ]] ; then
  echo "** Installing fzf"
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  ~/.fzf/install --all
  rm -f ~/.fzf.bash
  rm -f ~/.fzf.fish
  sudo ln -sf ~/.fzf/bin/fzf /usr/local/bin/fzf
fi

# nodejs
if [[ ! -f /usr/bin/nodejs ]] ; then
  echo "** Installing nodejs"
  curl -sL https://deb.nodesource.com/setup_12.x | sudo bash -
  sudo apt install -y nodejs
fi

# pyenv
if [[ ! -d ~/.pyenv ]] ; then
  echo "** Installing pyenv and python"
  curl https://pyenv.run | bash
  ~/.pyenv/bin/pyenv install 3.7.4
  ~/.pyenv/bin/pyenv global 3.7.4
  ~/.pyenv/shims/pip install --upgrade pip
fi

# poetry
if [[ ! -d ~/.poetry ]] ; then
  echo "** Installing poetry"
  curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
  mkdir -p ~/.oh-my-zsh/plugins/poetry
  ~/.poetry/bin/poetry completions zsh > ~/.oh-my-zsh/plugins/poetry/_poetry
fi

# nodejs packages
echo "** Installing nodejs packages..."
TOINSTALL=
for package in ${NODEJS_PACKAGES} ; do
  sudo npm list -g ${package} >/dev/null 2>&1 || TOINSTALL="${package} ${TOINSTALL} "
done
if [[ "" != "${TOINSTALL}" ]] ; then
  echo "   (packages to install: ${TOINSTALL})"
  sudo npm install -g ${TOINSTALL}
else
  echo "   (nothing to install)"
fi
sudo chown -R ${USER}:${USER} ~/.config

# python packages
echo "** Installing python packages..."
TOINSTALL=
for package in ${PYTHON_PACKAGES} ; do
  ~/.pyenv/shims/pip list | grep ${package} >/dev/null 2>&1 || TOINSTALL="${package} ${TOINSTALL} "
done
if [[ "" != "${TOINSTALL}" ]] ; then
  echo "   (packages to install: ${TOINSTALL})"
  ~/.pyenv/shims/pip install ${TOINSTALL}
else
  echo "   (nothing to install)"
fi

